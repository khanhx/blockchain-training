/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultisigWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmTransaction(uint256)"
      | "confirmTransaction(uint256,bytes[])"
      | "eip712Domain"
      | "executeTransaction"
      | "getConfirmSigner"
      | "isConfirmed"
      | "isOwner"
      | "proposeTransaction"
      | "required"
      | "revokeConfirmation"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "TransactionConfirmed"
      | "TransactionExecuted"
      | "TransactionFailed"
      | "TransactionProposed"
      | "TransactionRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmTransaction(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction(uint256,bytes[])",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmSigner",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmTransaction(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction(uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionConfirmedEvent {
  export type InputTuple = [transactionId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [transactionId: bigint, owner: string];
  export interface OutputObject {
    transactionId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionFailedEvent {
  export type InputTuple = [transactionId: BigNumberish, reason: string];
  export type OutputTuple = [transactionId: bigint, reason: string];
  export interface OutputObject {
    transactionId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionProposedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    transactionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRevokedEvent {
  export type InputTuple = [transactionId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [transactionId: bigint, owner: string];
  export interface OutputObject {
    transactionId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultisigWallet extends BaseContract {
  connect(runner?: ContractRunner | null): MultisigWallet;
  waitForDeployment(): Promise<this>;

  interface: MultisigWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "confirmTransaction(uint256)": TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "confirmTransaction(uint256,bytes[])": TypedContractMethod<
    [transactionId: BigNumberish, signature: BytesLike[]],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfirmSigner: TypedContractMethod<
    [transactionId: BigNumberish, signature: BytesLike],
    [string],
    "view"
  >;

  isConfirmed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  proposeTransaction: TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  required: TypedContractMethod<[], [bigint], "view">;

  revokeConfirmation: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        confirmationCount: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmTransaction(uint256)"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmTransaction(uint256,bytes[])"
  ): TypedContractMethod<
    [transactionId: BigNumberish, signature: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfirmSigner"
  ): TypedContractMethod<
    [transactionId: BigNumberish, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isConfirmed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposeTransaction"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "required"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeConfirmation"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        confirmationCount: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionConfirmed"
  ): TypedContractEvent<
    TransactionConfirmedEvent.InputTuple,
    TransactionConfirmedEvent.OutputTuple,
    TransactionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionFailed"
  ): TypedContractEvent<
    TransactionFailedEvent.InputTuple,
    TransactionFailedEvent.OutputTuple,
    TransactionFailedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionProposed"
  ): TypedContractEvent<
    TransactionProposedEvent.InputTuple,
    TransactionProposedEvent.OutputTuple,
    TransactionProposedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRevoked"
  ): TypedContractEvent<
    TransactionRevokedEvent.InputTuple,
    TransactionRevokedEvent.OutputTuple,
    TransactionRevokedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "TransactionConfirmed(uint256,address)": TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;
    TransactionConfirmed: TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;

    "TransactionExecuted(uint256,address,uint256,bytes)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionFailed(uint256,string)": TypedContractEvent<
      TransactionFailedEvent.InputTuple,
      TransactionFailedEvent.OutputTuple,
      TransactionFailedEvent.OutputObject
    >;
    TransactionFailed: TypedContractEvent<
      TransactionFailedEvent.InputTuple,
      TransactionFailedEvent.OutputTuple,
      TransactionFailedEvent.OutputObject
    >;

    "TransactionProposed(uint256,address,uint256,bytes)": TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;
    TransactionProposed: TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;

    "TransactionRevoked(uint256,address)": TypedContractEvent<
      TransactionRevokedEvent.InputTuple,
      TransactionRevokedEvent.OutputTuple,
      TransactionRevokedEvent.OutputObject
    >;
    TransactionRevoked: TypedContractEvent<
      TransactionRevokedEvent.InputTuple,
      TransactionRevokedEvent.OutputTuple,
      TransactionRevokedEvent.OutputObject
    >;
  };
}
