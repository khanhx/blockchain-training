/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Lock {
  export type LockInfoStruct = {
    tokenAddress: AddressLike;
    amount: BigNumberish;
    unlockTime: BigNumberish;
    user: AddressLike;
    isUnlocked: boolean;
  };

  export type LockInfoStructOutput = [
    tokenAddress: string,
    amount: bigint,
    unlockTime: bigint,
    user: string,
    isUnlocked: boolean
  ] & {
    tokenAddress: string;
    amount: bigint;
    unlockTime: bigint;
    user: string;
    isUnlocked: boolean;
  };
}

export interface LockInterface extends Interface {
  getFunction(
    nameOrSignature: "getLockInfo" | "lockCustomToken" | "lockTokens" | "unlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TokenLocked" | "TokenUnlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getLockInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockCustomToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLockInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockCustomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
}

export namespace TokenLockedEvent {
  export type InputTuple = [
    user: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    id: bigint,
    amount: bigint,
    unlockTime: bigint
  ];
  export interface OutputObject {
    user: string;
    id: bigint;
    amount: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUnlockedEvent {
  export type InputTuple = [
    user: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, id: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lock extends BaseContract {
  connect(runner?: ContractRunner | null): Lock;
  waitForDeployment(): Promise<this>;

  interface: LockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getLockInfo: TypedContractMethod<
    [id: BigNumberish],
    [Lock.LockInfoStructOutput],
    "view"
  >;

  lockCustomToken: TypedContractMethod<
    [amount: BigNumberish, tokenAddress: AddressLike, _minutes: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockTokens: TypedContractMethod<[_minutes: BigNumberish], [void], "payable">;

  unlock: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getLockInfo"
  ): TypedContractMethod<
    [id: BigNumberish],
    [Lock.LockInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockCustomToken"
  ): TypedContractMethod<
    [amount: BigNumberish, tokenAddress: AddressLike, _minutes: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockTokens"
  ): TypedContractMethod<[_minutes: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "unlock"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "TokenLocked"
  ): TypedContractEvent<
    TokenLockedEvent.InputTuple,
    TokenLockedEvent.OutputTuple,
    TokenLockedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUnlocked"
  ): TypedContractEvent<
    TokenUnlockedEvent.InputTuple,
    TokenUnlockedEvent.OutputTuple,
    TokenUnlockedEvent.OutputObject
  >;

  filters: {
    "TokenLocked(address,uint256,uint256,uint256)": TypedContractEvent<
      TokenLockedEvent.InputTuple,
      TokenLockedEvent.OutputTuple,
      TokenLockedEvent.OutputObject
    >;
    TokenLocked: TypedContractEvent<
      TokenLockedEvent.InputTuple,
      TokenLockedEvent.OutputTuple,
      TokenLockedEvent.OutputObject
    >;

    "TokenUnlocked(address,uint256,uint256)": TypedContractEvent<
      TokenUnlockedEvent.InputTuple,
      TokenUnlockedEvent.OutputTuple,
      TokenUnlockedEvent.OutputObject
    >;
    TokenUnlocked: TypedContractEvent<
      TokenUnlockedEvent.InputTuple,
      TokenUnlockedEvent.OutputTuple,
      TokenUnlockedEvent.OutputObject
    >;
  };
}
