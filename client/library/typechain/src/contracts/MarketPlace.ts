/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MarketPlace {
  export type ListingStruct = {
    nftAddress: AddressLike;
    tokenId: BigNumberish;
    seller: AddressLike;
    price: BigNumberish;
  };

  export type ListingStructOutput = [
    nftAddress: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ] & { nftAddress: string; tokenId: bigint; seller: string; price: bigint };
}

export interface MarketPlaceInterface extends Interface {
  getFunction(
    nameOrSignature: "getListingByPage" | "list" | "listings"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewListing"): EventFragment;

  encodeFunctionData(
    functionFragment: "getListingByPage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getListingByPage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
}

export namespace NewListingEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketPlace extends BaseContract {
  connect(runner?: ContractRunner | null): MarketPlace;
  waitForDeployment(): Promise<this>;

  interface: MarketPlaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getListingByPage: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [MarketPlace.ListingStructOutput[]],
    "view"
  >;

  list: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        nftAddress: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getListingByPage"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [MarketPlace.ListingStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "list"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, bigint] & {
        nftAddress: string;
        tokenId: bigint;
        seller: string;
        price: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "NewListing"
  ): TypedContractEvent<
    NewListingEvent.InputTuple,
    NewListingEvent.OutputTuple,
    NewListingEvent.OutputObject
  >;

  filters: {
    "NewListing(address,uint256,address,uint256)": TypedContractEvent<
      NewListingEvent.InputTuple,
      NewListingEvent.OutputTuple,
      NewListingEvent.OutputObject
    >;
    NewListing: TypedContractEvent<
      NewListingEvent.InputTuple,
      NewListingEvent.OutputTuple,
      NewListingEvent.OutputObject
    >;
  };
}
